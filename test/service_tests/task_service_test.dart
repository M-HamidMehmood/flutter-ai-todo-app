import 'package:flutter_test/flutter_test.dart';
import 'package:myapp/models/task.dart';
import 'package:myapp/services/task_service.dart';
import 'package:myapp/constants/app_constants.dart';
import 'package:shared_preferences/shared_preferences.dart';

void main() {
  group('TaskService Tests', () {
    late TaskService taskService;
    final testDate = DateTime(2025, 5, 7, 10, 30);
    
    setUp(() async {
      // Initialize shared preferences for testing
      SharedPreferences.setMockInitialValues({});
      taskService = TaskService();
    });

    test('Initial state is empty', () {
      expect(taskService.tasks, isEmpty);
      expect(taskService.pendingTasks, isEmpty);
      expect(taskService.completedTasks, isEmpty);
      expect(taskService.pendingTaskCount, 0);
      expect(taskService.completedTaskCount, 0);
    });

    test('Add task', () async {
      final task = Task(
        id: '', // Will be generated by service
        title: 'Test Task',
        category: 'Work',
        dueDate: testDate,
        priority: PriorityConstants.medium,
      );

      await taskService.addTask(task);
      
      expect(taskService.tasks.length, 1);
      expect(taskService.pendingTasks.length, 1);
      expect(taskService.completedTasks.length, 0);
      expect(taskService.tasks.first.title, 'Test Task');
      expect(taskService.tasks.first.id.isNotEmpty, true); // UUID should be generated
    });

    test('Update task', () async {
      // Add task first
      final task = Task(
        id: 'test-id',
        title: 'Test Task',
        category: 'Work',
        dueDate: testDate,
        priority: PriorityConstants.medium,
      );
      
      taskService.tasks.add(task);
      
      // Update task
      final updatedTask = task.copyWith(
        title: 'Updated Task',
        priority: PriorityConstants.high,
      );
      
      await taskService.updateTask(updatedTask);
      
      expect(taskService.tasks.length, 1);
      expect(taskService.tasks.first.title, 'Updated Task');
      expect(taskService.tasks.first.priority, PriorityConstants.high);
    });

    test('Delete task', () async {
      // Add task first
      final task = Task(
        id: 'test-id',
        title: 'Test Task',
        category: 'Work',
        dueDate: testDate,
        priority: PriorityConstants.medium,
      );
      
      taskService.tasks.add(task);
      expect(taskService.tasks.length, 1);
      
      // Delete task
      await taskService.deleteTask('test-id');
      
      expect(taskService.tasks, isEmpty);
    });

    test('Toggle task status', () async {
      // Add task first
      final task = Task(
        id: 'test-id',
        title: 'Test Task',
        category: 'Work',
        dueDate: testDate,
        priority: PriorityConstants.medium,
        isCompleted: false,
      );
      
      taskService.tasks.add(task);
      expect(taskService.pendingTasks.length, 1);
      expect(taskService.completedTasks.length, 0);
      
      // Toggle task to completed
      await taskService.toggleTaskStatus('test-id');
      
      expect(taskService.pendingTasks.length, 0);
      expect(taskService.completedTasks.length, 1);
      expect(taskService.tasks.first.isCompleted, true);
      
      // Toggle task back to pending
      await taskService.toggleTaskStatus('test-id');
      
      expect(taskService.pendingTasks.length, 1);
      expect(taskService.completedTasks.length, 0);
      expect(taskService.tasks.first.isCompleted, false);
    });

    test('Get tasks by category', () {
      // Add tasks with different categories
      final workTask = Task(
        id: 'work-id',
        title: 'Work Task',
        category: 'Work',
        dueDate: testDate,
        priority: PriorityConstants.medium,
      );
      
      final studyTask = Task(
        id: 'study-id',
        title: 'Study Task',
        category: 'Study',
        dueDate: testDate,
        priority: PriorityConstants.high,
      );
      
      final personalTask = Task(
        id: 'personal-id',
        title: 'Personal Task',
        category: 'Personal',
        dueDate: testDate,
        priority: PriorityConstants.low,
      );
      
      taskService.tasks.addAll([workTask, studyTask, personalTask]);
      
      // Test filtering
      expect(taskService.getTasksByCategory('Work').length, 1);
      expect(taskService.getTasksByCategory('Work').first.id, 'work-id');
      
      expect(taskService.getTasksByCategory('Study').length, 1);
      expect(taskService.getTasksByCategory('Study').first.id, 'study-id');
      
      expect(taskService.getTasksByCategory('Personal').length, 1);
      expect(taskService.getTasksByCategory('Personal').first.id, 'personal-id');
      
      expect(taskService.getTasksByCategory('All').length, 3);
    });

    test('Prioritize tasks', () {
      // Add tasks with different priorities and due dates
      final lowPriorityTask = Task(
        id: 'low-id',
        title: 'Low Priority Task',
        category: 'Work',
        dueDate: testDate.add(const Duration(days: 5)),
        priority: PriorityConstants.low,
      );
      
      final mediumPriorityTask = Task(
        id: 'medium-id',
        title: 'Medium Priority Task',
        category: 'Study',
        dueDate: testDate.add(const Duration(days: 2)),
        priority: PriorityConstants.medium,
      );
      
      final highPriorityTask = Task(
        id: 'high-id',
        title: 'High Priority Task',
        category: 'Personal',
        dueDate: testDate.add(const Duration(days: 7)),
        priority: PriorityConstants.high,
      );
      
      taskService.tasks.addAll([lowPriorityTask, mediumPriorityTask, highPriorityTask]);
      
      // Prioritize tasks
      taskService.prioritizeTasks();
      
      // Should be prioritized first by priority, then by due date
      expect(taskService.tasks[0].id, 'high-id');
      expect(taskService.tasks[1].id, 'medium-id');
      expect(taskService.tasks[2].id, 'low-id');
    });

    test('Guess duration based on keywords', () {
      expect(taskService.guessDuration('Meeting with team'), 60);
      expect(taskService.guessDuration('Send email to client'), 15);
      expect(taskService.guessDuration('Write report'), 120);
      expect(taskService.guessDuration('Review designs'), 45);
      expect(taskService.guessDuration('Create presentation slides'), 90);
      expect(taskService.guessDuration('Random task with no keywords'), 30);
    });
  });
} 