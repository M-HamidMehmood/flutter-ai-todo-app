import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:provider/provider.dart';
import '../models/task.dart';
import '../services/task_service.dart';
import '../services/notification_service.dart';
import '../constants/app_constants.dart';
import '../utils/validation_utils.dart';
import '../utils/date_utils.dart';

class TaskForm extends StatefulWidget {
  final Task? task; // If provided, we're editing an existing task

  const TaskForm({super.key, this.task});

  @override
  State<TaskForm> createState() => _TaskFormState();
}

class _TaskFormState extends State<TaskForm> {
  final _formKey = GlobalKey<FormState>();
  final _titleController = TextEditingController();
  
  late String _category;
  late DateTime _dueDate;
  late TimeOfDay _dueTime;
  late int _priority;
  late int _duration;

  @override
  void initState() {
    super.initState();
    
    // Set default values or use existing task values
    if (widget.task != null) {
      _titleController.text = widget.task!.title;
      _category = widget.task!.category;
      _dueDate = widget.task!.dueDate;
      _dueTime = TimeOfDay.fromDateTime(widget.task!.dueDate);
      _priority = widget.task!.priority;
      _duration = widget.task!.duration;
    } else {
      _category = CategoryConstants.categories.first;
      _dueDate = DateTime.now().add(const Duration(days: 1));
      _dueTime = TimeOfDay.now();
      _priority = PriorityConstants.medium; // Medium priority by default
      _duration = 30; // Default duration
      
      // Auto-guess duration when title changes
      _titleController.addListener(_guessDuration);
    }
  }
  
  void _guessDuration() {
    if (_titleController.text.isNotEmpty && widget.task == null) {
      final taskService = Provider.of<TaskService>(context, listen: false);
      final guessedDuration = taskService.guessDuration(_titleController.text);
      
      setState(() {
        _duration = guessedDuration;
      });
    }
  }

  @override
  void dispose() {
    _titleController.dispose();
    super.dispose();
  }

  // Date picker
  Future<void> _selectDate(BuildContext context) async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: _dueDate,
      firstDate: DateTime.now(),
      lastDate: DateTime.now().add(const Duration(days: 365)),
    );
    
    if (picked != null && picked != _dueDate) {
      setState(() {
        _dueDate = picked;
      });
    }
  }

  // Time picker
  Future<void> _selectTime(BuildContext context) async {
    final TimeOfDay? picked = await showTimePicker(
      context: context,
      initialTime: _dueTime,
    );
    
    if (picked != null && picked != _dueTime) {
      setState(() {
        _dueTime = picked;
      });
    }
  }

  // Save task
  void _saveTask() {
    if (_formKey.currentState!.validate()) {
      // Combine date and time
      final dueDateTime = DateTime(
        _dueDate.year,
        _dueDate.month,
        _dueDate.day,
        _dueTime.hour,
        _dueTime.minute,
      );
      
      final taskService = Provider.of<TaskService>(context, listen: false);
      final notificationService = NotificationService();
      
      if (widget.task == null) {
        // Create new task
        final task = Task(
          id: '',  // Will be generated by the service
          title: _titleController.text,
          category: _category,
          dueDate: dueDateTime,
          priority: _priority,
          duration: _duration,
        );
        
        taskService.addTask(task).then((_) {
          // Schedule notification if due in future
          if (dueDateTime.isAfter(DateTime.now())) {
            notificationService.scheduleTaskReminder(
              taskService.tasks.firstWhere((t) => t.title == task.title)
            );
          }
          
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('Task added successfully'),
              behavior: SnackBarBehavior.floating,
            ),
          );
        });
      } else {
        // Update existing task
        final updatedTask = widget.task!.copyWith(
          title: _titleController.text,
          category: _category,
          dueDate: dueDateTime,
          priority: _priority,
          duration: _duration,
        );
        
        // Cancel old notification
        notificationService.cancelTaskReminder(widget.task!);
        
        taskService.updateTask(updatedTask).then((_) {
          // Re-schedule notification if not completed and due in future
          if (!updatedTask.isCompleted && dueDateTime.isAfter(DateTime.now())) {
            notificationService.scheduleTaskReminder(updatedTask);
          }
          
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('Task updated successfully'),
              behavior: SnackBarBehavior.floating,
            ),
          );
        });
      }
      
      Navigator.pop(context);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.task == null ? 'Add Task' : 'Edit Task'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(UIConstants.defaultPadding),
        child: Form(
          key: _formKey,
          child: ListView(
            children: [
              // Title
              TextFormField(
                controller: _titleController,
                decoration: const InputDecoration(
                  labelText: 'Task Title',
                  border: OutlineInputBorder(),
                  prefixIcon: Icon(Icons.title),
                ),
                validator: (value) => ValidationUtils.validateNonEmpty(value, 'a title'),
                textCapitalization: TextCapitalization.sentences,
                autofocus: widget.task == null,
              ),
              const SizedBox(height: UIConstants.defaultPadding),
              
              // Category dropdown
              DropdownButtonFormField<String>(
                value: _category,
                decoration: const InputDecoration(
                  labelText: 'Category',
                  border: OutlineInputBorder(),
                  prefixIcon: Icon(Icons.category),
                ),
                items: CategoryConstants.categories.map((category) {
                  return DropdownMenuItem(
                    value: category,
                    child: Row(
                      children: [
                        Container(
                          width: 12,
                          height: 12,
                          decoration: BoxDecoration(
                            color: CategoryConstants.getCategoryColor(category),
                            shape: BoxShape.circle,
                          ),
                        ),
                        const SizedBox(width: 8),
                        Text(category),
                      ],
                    ),
                  );
                }).toList(),
                onChanged: (value) {
                  setState(() {
                    _category = value!;
                  });
                },
              ),
              const SizedBox(height: UIConstants.defaultPadding),
              
              // Due date picker
              Row(
                children: [
                  Expanded(
                    child: InputDecorator(
                      decoration: const InputDecoration(
                        labelText: 'Due Date',
                        border: OutlineInputBorder(),
                        prefixIcon: Icon(Icons.calendar_month),
                      ),
                      child: Text(
                        AppDateUtils.fullDateFormat.format(_dueDate),
                      ),
                    ),
                  ),
                  IconButton(
                    icon: const Icon(Icons.calendar_today),
                    onPressed: () => _selectDate(context),
                  ),
                ],
              ),
              const SizedBox(height: UIConstants.defaultPadding),
              
              // Due time picker
              Row(
                children: [
                  Expanded(
                    child: InputDecorator(
                      decoration: const InputDecoration(
                        labelText: 'Due Time',
                        border: OutlineInputBorder(),
                        prefixIcon: Icon(Icons.access_time),
                      ),
                      child: Text(
                        _dueTime.format(context),
                      ),
                    ),
                  ),
                  IconButton(
                    icon: const Icon(Icons.access_time),
                    onPressed: () => _selectTime(context),
                  ),
                ],
              ),
              const SizedBox(height: UIConstants.defaultPadding),
              
              // Priority selection
              Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Padding(
                    padding: EdgeInsets.only(left: 4, bottom: 8),
                    child: Text('Priority', style: TextStyle(fontSize: 16)),
                  ),
                  SegmentedButton<int>(
                    segments: [
                      ButtonSegment(
                        value: PriorityConstants.low,
                        label: const Text('Low'),
                        icon: const Icon(Icons.arrow_downward),
                      ),
                      ButtonSegment(
                        value: PriorityConstants.medium,
                        label: const Text('Medium'),
                        icon: const Icon(Icons.remove),
                      ),
                      ButtonSegment(
                        value: PriorityConstants.high,
                        label: const Text('High'),
                        icon: const Icon(Icons.arrow_upward),
                      ),
                    ],
                    selected: {_priority},
                    onSelectionChanged: (Set<int> newSelection) {
                      setState(() {
                        _priority = newSelection.first;
                      });
                    },
                    style: ButtonStyle(
                      backgroundColor: WidgetStateProperty.resolveWith<Color?>(
                        (Set<WidgetState> states) {
                          if (states.contains(WidgetState.selected)) {
                            return PriorityConstants.priorityColors[_priority]?.withOpacity(0.2);
                          }
                          return null;
                        },
                      ),
                    ),
                  ),
                ],
              ),
              const SizedBox(height: UIConstants.defaultPadding),
              
              // Duration field
              TextFormField(
                initialValue: _duration.toString(),
                decoration: const InputDecoration(
                  labelText: 'Duration (minutes)',
                  border: OutlineInputBorder(),
                  prefixIcon: Icon(Icons.timer),
                  helperText: 'Estimated time needed to complete this task',
                ),
                keyboardType: TextInputType.number,
                validator: (value) => ValidationUtils.validatePositiveInteger(value, 'duration'),
                onChanged: (value) {
                  setState(() {
                    _duration = int.tryParse(value) ?? 30;
                  });
                },
              ),
              const SizedBox(height: UIConstants.defaultPadding * 1.5),
              
              // Save button
              ElevatedButton.icon(
                onPressed: _saveTask,
                icon: Icon(widget.task == null ? Icons.add_task : Icons.save),
                label: Text(
                  widget.task == null ? 'Add Task' : 'Update Task',
                  style: const TextStyle(fontSize: 16),
                ),
                style: ElevatedButton.styleFrom(
                  padding: const EdgeInsets.symmetric(vertical: 16),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
} 